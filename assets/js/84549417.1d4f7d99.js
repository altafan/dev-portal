"use strict";(self.webpackChunkdev_portal=self.webpackChunkdev_portal||[]).push([[6509],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(f,o(o({ref:t},l),{},{components:n})):a.createElement(f,o({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4650:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return l},default:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={title:"BOTD#3: Swap"},p="Swap protocol",c={unversionedId:"specs/swap-protocol",id:"specs/swap-protocol",isDocsHomePage:!1,title:"BOTD#3: Swap",description:"Overview",source:"@site/docs/specs/03-swap-protocol.md",sourceDirName:"specs",slug:"/specs/swap-protocol",permalink:"/docs/specs/swap-protocol",editUrl:"https://github.com/tdex-network/dev-portal/edit/master/docs/specs/03-swap-protocol.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"BOTD#3: Swap"},sidebar:"tutorialSidebar",previous:{title:"BOTD#2: Transport",permalink:"/docs/specs/transport-protocol"},next:{title:"BOTD#4: Trade",permalink:"/docs/specs/trade-protocol"}},l=[{value:"Overview",id:"overview",children:[]},{value:"Swap",id:"swap",children:[{value:"Data Structures",id:"data-structures",children:[]},{value:"SwapRequest",id:"swaprequest",children:[]},{value:"SwapAccept",id:"swapaccept",children:[]},{value:"SwapComplete",id:"swapcomplete",children:[]},{value:"SwapFail",id:"swapfail",children:[]}]}],d={toc:l};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"swap-protocol"},"Swap protocol"),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"The ",(0,i.kt)("strong",{parentName:"p"},"swap protocol")," defines the process by which two parties conclude an atomic swap using an interactive exchange of signed messages and Elements transaction."),(0,i.kt)("p",null,"Identifying with ",(0,i.kt)("em",{parentName:"p"},"Alice")," as the ",(0,i.kt)("strong",{parentName:"p"},"Proposer")," and ",(0,i.kt)("em",{parentName:"p"},"Bob")," the ",(0,i.kt)("strong",{parentName:"p"},"Responder"),":"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Alice connects to Bob through secure transport layer and encrypted connection."),(0,i.kt)("li",{parentName:"ol"},"Alice proposes a swap crafting an unsigned transaction and a message defined as sending ",(0,i.kt)("inlineCode",{parentName:"li"},"AMOUNT_P")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"ASSET_P")," and receiving ",(0,i.kt)("inlineCode",{parentName:"li"},"AMOUNT_R")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"ASSET_R"),". If confidential, the blinding keys need to be included."),(0,i.kt)("li",{parentName:"ol"},"Alice sends to Bob the ",(0,i.kt)("inlineCode",{parentName:"li"},"SwapRequest")," message containing the unsigned transaction. An additional input and eventual change output needed to pay ",(0,i.kt)("em",{parentName:"li"},"half")," of the network fees is included by Alice in the transaction."),(0,i.kt)("li",{parentName:"ol"},"Bob, if accepts the terms, funds the swap and partially signs the proposed transaction and includes his blinding keys too."),(0,i.kt)("li",{parentName:"ol"},"Bob sends back to Alice the ",(0,i.kt)("inlineCode",{parentName:"li"},"SwapAccept")," message containing the partially signed transaction. An additional input and eventual change output needed to pay the remaining ",(0,i.kt)("em",{parentName:"li"},"half")," of the network fees is included by Bob in the transaction."),(0,i.kt)("li",{parentName:"ol"},"Alice parses the accepted swap and signs the transaction."),(0,i.kt)("li",{parentName:"ol"},"Alice sends to Bob the ",(0,i.kt)("inlineCode",{parentName:"li"},"SwapComplete")," message containing the signed transaction."),(0,i.kt)("li",{parentName:"ol"},"Ideally Bob finalizes and broadcast the transaction to the Liquid network.")),(0,i.kt)("h2",{id:"swap"},"Swap"),(0,i.kt)("h3",{id:"data-structures"},"Data Structures"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},"syntax = \"proto3\";\n\nmessage SwapRequest {\n  // Random unique identifier for the current message\n  string id = 1;\n  // The proposer's quantity\n  uint64 amount_p = 2;\n  // The proposer's asset hash\n  string asset_p = 3;\n  // The responder's quantity\n  uint64 amount_r = 4;\n  // The responder's asset hash\n  string asset_r = 5;\n  // The proposer's unsigned transaction in PSETv2 format (base64 string)\n  string transaction = 6;\n  // The list of proposer's unblinded inputs data, even in case they are\n  // unconfidential.\n  repeated UnblindedInput unblinded_inputs = 7;\n}\n\nmessage SwapAccept {\n  // Random unique identifier for the current message\n  string id = 1;\n  // Identifier of the SwapRequest message\n  string request_id = 2;\n  // The complete swap transaction in PSETv2 format (base64 string),\n  // signed by the Responder\n  string transaction = 3;\n  // The original list of trader's unblinded inputs updated with those\n  // of the inputs added by the responder, whether they're confidential or not.\n  repeated UnblindedInput unblinded_inputs = 4;\n}\n\nmessage SwapComplete {\n  // Random unique identifier for the current message\n  string id = 1;\n  // Identifier of the SwapAccept message\n  string accept_id = 2;\n  // The swap transaction in PSETv2 or raw hex format signed by the Proposer\n  string transaction = 3;\n}\n\nmessage SwapFail {\n  // Random unique identifier for the current message\n  string id = 1;\n  // Identifier of either SwapRequest or SwapAccept message. It can be empty\n  string message_id = 2;\n  // The failure code. It can be empty\n  uint32 failure_code = 3;\n  // The failure reason messaged\n  string failure_message = 4;\n}\n\nmessage UnblindedInput {\n  // Index of the transaction input of reference.\n  uint32 index = 1;\n  // Unblinded asset.\n  string asset = 2;\n  // Unblinded amount.\n  uint64 amount = 3;\n  // Asset blinder for blinded prevout, 32-byte 0x00..00 if unconfidential.\n  string asset_blinder = 4;\n  // Amount blinder for blinded prevout, 32-byte 0x00..00 if unconfidential.\n  string amount_blinder = 5;\n}\n")),(0,i.kt)("h3",{id:"swaprequest"},"SwapRequest"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"SwapRequest")," message is sent by the ",(0,i.kt)("strong",{parentName:"p"},"Proposer")," to the ",(0,i.kt)("strong",{parentName:"p"},"Responder")," to start the swap negotiation. The transaction is a PSETv2 base64 encoded string containing the Proposer's inputs and outputs (amount_r and eventual change)."),(0,i.kt)("h3",{id:"swapaccept"},"SwapAccept"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"SwapAccept")," message is sent by the ",(0,i.kt)("strong",{parentName:"p"},"Responder")," to the ",(0,i.kt)("strong",{parentName:"p"},"Proposer")," to accept the swap request."),(0,i.kt)("h3",{id:"swapcomplete"},"SwapComplete"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"SwapComplete")," message is sent by ",(0,i.kt)("strong",{parentName:"p"},"Proposer")," to the ",(0,i.kt)("strong",{parentName:"p"},"Responder")," to announce the successful completion of the swap."),(0,i.kt)("h3",{id:"swapfail"},"SwapFail"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"SwapFail")," message can be sent by either side of the swap protocol, at any time, to announce the swap termination.\n",(0,i.kt)("inlineCode",{parentName:"p"},"failure_code")," is an optional parameter for specifying the failure reason. TBD"))}u.isMDXComponent=!0}}]);