"use strict";(self.webpackChunkdev_portal=self.webpackChunkdev_portal||[]).push([[4486],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(p,".").concat(m)]||d[m]||l[m]||s;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2553:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(7462),a=n(3366),s=(n(7294),n(3905)),o=["components"],i={title:"Swap",sidebar_position:4},p=void 0,c={unversionedId:"trader/SDK/Javascript/swap",id:"trader/SDK/Javascript/swap",isDocsHomePage:!1,title:"Swap",description:"Create manually Swap messages without connecting to a provider. This fully implements BOTD#3",source:"@site/docs/trader/SDK/Javascript/swap.md",sourceDirName:"trader/SDK/Javascript",slug:"/trader/SDK/Javascript/swap",permalink:"/docs/trader/SDK/Javascript/swap",editUrl:"https://github.com/tdex-network/dev-portal/edit/master/docs/trader/SDK/Javascript/swap.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Swap",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Trade",permalink:"/docs/trader/SDK/Javascript/trade"},next:{title:"Discovery",permalink:"/docs/trader/SDK/Javascript/discovery"}},u=[],l={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Create manually Swap messages without connecting to a provider. This fully implements ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/tdex-network/tdex-specs/blob/master/03-swap-protocol.md"},(0,s.kt)("strong",{parentName:"a"},"BOTD#3"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'import { Swap } from "tdex-sdk";\n\nconst swap = new Swap({ chain: "regtest" });\n\nconst LBTC = "5ac9f65c0efcc4775e0baec4ec03abdde22473cd3cf33c0419ca290e0751b225";\nconst USDT = "c5870288a7c9eb5db398a5b5e7221feb9753134439e8ed9f569b0eea5a423330";\n\n// Alice starts a swap proposal\n//\n// You need to create and provide an unsigned transaction that has\n// enough inputs to cover amountToBeSent and the desired output\n// in case of confidential inputs/outputs, you also need to provide the blinding keys.\nconst swapRequestMessage = await swap.request({\n  assetToBeSent: USDT,\n  amountToBeSent: 300,\n  assetToReceive: LBTC,\n  amountToReceive: 0.05,\n  psetBase64: "...",\n  inputBlindingKeys: {},\n  outputBlindingKeys: {},\n});\n\n//Bob parses the request and inspect the terms\nlet json = Swap.parse({\n  message: swapRequestMessage,\n  type: "SwapRequest",\n});\n\n// Bob provides the transaction with his signed inputs and outputs\n// he also needs to add its blinding keys\nconst swapAcceptMessage = await swap.accept({\n  message: swapRequestMessage,\n  psetBase64: "...",\n  inputBlindingKeys: {},\n  outputBlindingKeys: {},\n});\n\n//Alice can parse again the message and inspect the terms (optional)\njson = Swap.parse({\n  message: swapAcceptMessage,\n  type: "SwapAccept",\n});\n\n// Alice adds his signed inputs to the transaction\nconst swapCompleteMessage = await swap.complete({\n  message: swapAcceptMessage,\n  psetBase64: "...",\n});\n\n// Alice can sends the completed swap to Bob\n// Now Bob finalize the transaction and broadcast it\n')))}d.isMDXComponent=!0}}]);